#![allow(non_snake_case)]
#![allow(unused_parens, clippy::double_parens)]
#![allow(unused_mut, unused_assignments)]
#![allow(unused_imports)]
#![allow(clippy::while_immutable_condition)]
#![allow(clippy::assign_op_pattern)]
#![allow(clippy::needless_return)]
#![allow(clippy::unnecessary_cast)]
#![allow(clippy::if_same_then_else)]

use std::{error::Error, path::PathBuf, process::ExitCode};

use libtest_mimic::{Arguments, Failed, Trial};

use f2rust_std::Context;

include!(concat!(env!("OUT_DIR"), "/generated_files.rs"));

fn main() -> Result<ExitCode, Box<dyn Error>> {
    let args = Arguments::from_args();

    let crate_dir = PathBuf::from(std::env::var("CARGO_MANIFEST_DIR").unwrap_or(".".to_owned()));

    // Generated by build.rs
    let funcs = get_generated_files();

    let mut tests = vec![];

    // Run each generated function, and compare to the expected output
    for (name, func) in funcs {
        let crate_dir = crate_dir.clone();
        let test = Trial::test(name, move || {
            let mut stdout = vec![];
            let mut ctx = Context::new();
            ctx.set_stdout(&mut stdout);

            func(&mut ctx)?;

            drop(ctx);

            let expected =
                std::fs::read(crate_dir.join("fortran").join(name).with_extension("exp"))?;

            // println!("{}", String::from_utf8_lossy(&stdout));

            assert_eq!(
                String::from_utf8_lossy(&stdout),
                String::from_utf8_lossy(&expected)
            );
            Ok(())
        })
        .with_kind("compare");

        tests.push(test);
    }

    Ok(libtest_mimic::run(&args, tests).exit_code())
}
